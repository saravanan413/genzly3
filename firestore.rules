rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read all profiles, write their own
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Followers subcollection - only profile owner can manage
      match /followers/{followerId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Following subcollection - only profile owner can manage
      match /following/{followedId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Follow requests subcollection - only profile owner can manage
      match /followRequests/{requesterId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Blocked users subcollection - users can manage their own blocked list
      match /blockedUsers/{blockedUserId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // PERSISTENT CHAT DOCUMENTS - Main chat collection for chat list persistence
    match /chats/{chatId} {
      // Only users in the 'users' array can read/write the chat document
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.users;
      
      // Allow updates to chat document if user is in the users array
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.users;
      
      // Allow creation of chat document if:
      // 1. User is authenticated
      // 2. User is in the users array of the document being created
      // 3. Users array contains exactly 2 users (1-on-1 chat)
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.users &&
        request.resource.data.users.size() == 2 &&
        request.resource.data.keys().hasAll(['users', 'lastMessage', 'createdAt', 'updatedAt']);
      
      // Chat messages subcollection
      match /messages/{messageId} {
        // Only chat participants can read messages
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        
        // Only chat participants can create messages, and only if they are the sender
        allow create: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users &&
          request.auth.uid == request.resource.data.senderId;
        
        // Allow updates for marking messages as seen
        allow update: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
      
      // Chat typing indicators
      match /typing/{userId} {
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        allow write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users &&
          request.auth.uid == userId;
      }
    }
    
    // Posts - users can read all, write their own
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Stories - users can read active stories, write their own
    match /stories/{storyId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Reels - users can read all, write their own
    match /reels/{reelId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Notifications - users can only access their own notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }

    // Reports - only authenticated users can create reports, only admins can read
    match /reports/{reportId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.reportedById;
      allow read, update, delete: if false; // Only admins should access reports
    }
  }
}
